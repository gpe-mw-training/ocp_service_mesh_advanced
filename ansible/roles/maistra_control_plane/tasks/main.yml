---
- name: Wait for ES operator to be available in project
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ elasticsearch_operator_startingcsv }}"
    namespace: "{{ ocp_project }}"
  register: es_csv_check
  retries: 30
  delay: 20
  until:
  - es_csv_check.resources | length > 0
  - es_csv_check.resources[0].status is defined
  - es_csv_check.resources[0].status.phase is defined
  - es_csv_check.resources[0].status.phase == "Succeeded"

- name: Wait for Jaeger operator to be available in project
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ jaeger_operator_startingcsv }}"
    namespace: "{{ ocp_project }}"
  register: jaeger_csv_check
  retries: 30
  delay: 20
  until:
  - jaeger_csv_check.resources | length > 0
  - jaeger_csv_check.resources[0].status is defined
  - jaeger_csv_check.resources[0].status.phase is defined
  - jaeger_csv_check.resources[0].status.phase == "Succeeded"

- name: Wait for Kiali operator to be available in project
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ kiali_operator_startingcsv }}"
    namespace: "{{ ocp_project }}"
  register: kiali_csv_check
  retries: 30
  delay: 20
  until:
  - kiali_csv_check.resources | length > 0
  - kiali_csv_check.resources[0].status is defined
  - kiali_csv_check.resources[0].status.phase is defined
  - kiali_csv_check.resources[0].status.phase == "Succeeded"

- name: Wait for Maistra operator to be available in project
  k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    name: "{{ maistra_operator_startingcsv }}"
    namespace: "{{ ocp_project }}"
  register: maistra_csv_check
  retries: 30
  delay: 20
  until:
  - maistra_csv_check.resources | length > 0
  - maistra_csv_check.resources[0].status is defined
  - maistra_csv_check.resources[0].status.phase is defined
  - maistra_csv_check.resources[0].status.phase == "Succeeded"

- name: "Install maistra control_plane in {{ ocp_project }}"
  shell: |
    {{ openshift_cli }} apply -f {{ resources_base_dir }}/maistra/service-mesh-control-plane.yml -n {{ ocp_project }}

- name: "Wait until service mesh control plane is active; {{ ocp_project }}"
  shell: "{{ openshift_cli }} get deployment istiod-full-install -o template --template={{ json_template }} -n {{ ocp_project }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 60
  delay: 10
  changed_when: false

- name: "Install empty maistra ServiceMeshMemberRoll in {{ ocp_project }}"
  shell: |
    {{ openshift_cli }} apply -f {{ resources_base_dir }}/maistra/service-mesh-member-roll-empty.yml -n {{ ocp_project }}

